generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    teamId        String?
    role          UserRole? @default(USER)
    issues        Issue[]
    accounts      Account[]
    sessions      Session[]
    Team          Team?     @relation(fields: [teamId], references: [id])

    @@index([teamId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Team {
    id     String  @id @default(cuid())
    name   String
    domain String  @unique
    avatar String?
    boards Board[]
    users  User[]
}

model Board {
    id      String   @id @default(cuid())
    name    String
    teamId  String
    columns Column[]
    tags    Tag[]
    Team    Team     @relation(fields: [teamId], references: [id])

    @@index([teamId])
}

model Column {
    id      String  @id @default(cuid())
    name    String
    boardId String
    issues  Issue[]
    board   Board   @relation(fields: [boardId], references: [id])

    @@index([boardId])
}

enum IssuePriority {
    HIGH
    MEDIUM
    LOW
}

model Issue {
    id          String        @id @default(cuid())
    name        String
    description String        @db.Text
    priority    IssuePriority @default(MEDIUM)
    columnId    String
    assigneeId  String
    tags        Tag[]
    assignee    User          @relation(fields: [assigneeId], references: [id])
    column      Column        @relation(fields: [columnId], references: [id])

    @@index([assigneeId])
    @@index([columnId])
}

model Tag {
    id      String  @id @default(cuid())
    name    String
    boardId String
    issues  Issue[]
    board   Board   @relation(fields: [boardId], references: [id])

    @@index([boardId])
}
